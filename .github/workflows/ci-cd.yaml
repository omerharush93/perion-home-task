name: CI/CD Pipeline - Hello World Node.js

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'k8s/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'k8s/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: omer/hello-world-node

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      app: ${{ steps.filter.outputs.app }}
      k8s: ${{ steps.filter.outputs.k8s }}
    steps:
      - uses: actions/checkout@v4
      - name: Detect changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            app:
              - 'app/**'
            k8s:
              - 'k8s/**'

  build-and-push:
    needs: detect-changes
    if: needs.detect-changes.outputs.app == 'true'
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build & push Docker image
        id: build
        run: |
          cd app/hello-world-node
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          echo "image_uri=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT
      
      - name: Run tests
        run: |
          cd app/hello-world-node
          npm install
          npm test || true

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build.outputs.image_uri }}
          format: sarif
          output: trivy-results.sarif

      - name: Build & Test success
        if: success()
        run: |
          echo "âœ… Build & Test stage completed successfully!"
          echo "ðŸ”§ Image built and pushed: ${{ steps.build.outputs.image_uri }}"

  update-manifest:
    needs: detect-changes
    if: needs.detect-changes.outputs.k8s == 'true' || needs.detect-changes.outputs.app == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate Kubernetes manifests (lint & dry-run)
        uses: azure/k8s-lint@v3
        with:
          kubeconformOpts: -ignore-missing-schemas
          manifests: |
            k8s/
          lintType: kubeconform,dryrun

      - name: Update manifest
        run: |
          if [[ "${{ needs.detect-changes.outputs.app }}" == "true" ]]; then
            sed -i "s|image:.*|image: ${{ needs.build-and-test.outputs.image_uri }}|g" k8s/deployment.yaml
            sed -i "s|version:.*|version: \"${{ github.sha }}\"|g" k8s/deployment.yaml
          fi
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add k8s/
          git commit -m "Update k8s manifests" || echo "No changes"
          git push

      - name: Notify success
        if: success()
        run: echo "âœ… CI/CD pipeline completed successfully. ArgoCD will sync the latest changes."