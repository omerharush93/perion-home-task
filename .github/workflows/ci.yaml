name: CI/CD Pipeline - Hello World Node.js

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: omer/hello-world-node
  EKS_CLUSTER_NAME: omer-perion-cluster

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}

      run: |
        cd app/hello-world-node
        # Build Docker image from correct directory
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output image URI for ArgoCD
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Run tests
      run: |
        echo "Running tests..."
        cd app/hello-world-node
        npm install
        npm test || true
        
    - name: Security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Update manifest with new image
      if: github.ref == 'refs/heads/main'
      run: |
        # עדכון ה-deployment עם ה-image החדש (SHA במקום latest)
        sed -i "s|image:.*|image: ${{ steps.build.outputs.image_uri }}|g" k8s/deployment.yaml
        
        # עדכון ה-version label עם ה-SHA החדש
        sed -i "s|version:.*|version: \"${{ github.sha }}\"|g" k8s/deployment.yaml
        
        # Commit and push changes
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add k8s/deployment.yaml
        git commit -m "Update image to ${{ github.sha }}" || echo "No changes to commit"
        git push
        
    - name: Notify on success
      if: success()
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        echo "Image: ${{ steps.build.outputs.image_uri }}"
        echo "ArgoCD will automatically sync the deployment"