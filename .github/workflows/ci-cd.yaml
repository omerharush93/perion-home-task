name: CI/CD Pipeline - Hello World Node.js

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'charts/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'charts/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: omer/hello-world-node

jobs:
  # Change detection
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      app: ${{ (steps.filter.outputs.app == 'true') || (github.event_name == 'workflow_dispatch') }}
      charts: ${{ (steps.filter.outputs.charts == 'true') || (github.event_name == 'workflow_dispatch') }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect changes
        id: filter
        if: github.event_name != 'workflow_dispatch'
        uses: dorny/paths-filter@v3
        with:
          filters: |
            app:
              - 'app/**'
            charts:
              - 'charts/**'

      - name: Manual run - test all
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Manual workflow run detected"
          echo "Will run full pipeline for all components"

  # Security and quality checks for PRs and main
  security-and-tests:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.app == 'true'
    steps:
      - uses: actions/checkout@v4

      # Install and test
      - name: Install dependencies & run tests
        run: |
          cd app/hello-world-node
          npm install
          npm audit --audit-level high
          npm test

  # Build and push - only on main branch
  build-and-push:
    runs-on: ubuntu-latest
    needs: [detect-changes, security-and-tests, validate-charts]
    if: |
      github.ref == 'refs/heads/main' &&
      needs.detect-changes.outputs.app == 'true' &&
      needs.security-and-tests.result == 'success' &&
      (needs.validate-charts.result == 'success' || needs.validate-charts.result == 'skipped')


    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}
    steps:
      - uses: actions/checkout@v4
      
      # AWS Authentication
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # ECR Login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      # Build and push Docker image
      - name: Build & push Docker image
        id: build
        run: |
          cd app/hello-world-node
          
          # Build image
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          
          # Push image
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          
          echo "image_uri=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      # Container security scan
      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build.outputs.image_uri }}
          format: sarif
          output: trivy-results.sarif

  validate-charts:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.charts == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.18.4

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Lint Helm chart
        run: |
          ct lint --charts charts/hello-world-node --validate-maintainers=false
          echo "‚úÖ Helm chart validation completed"

  # Update manifests - only on main after successful build
  update-manifest:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    if: |
      github.ref == 'refs/heads/main' &&
      needs.detect-changes.outputs.app == 'true' &&
      needs.build-and-push.result == 'success'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Helm values
        run: |
          yq e '.image.tag = "${{ github.sha }}"' -i charts/hello-world-node/values.yaml

      # Commit changes
      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git add charts/  
          git commit -m "üöÄ Update Helm chart to ${{ github.sha }}"
          git push
  # PR feedback
  pr-checks:
    if: github.event_name == 'pull_request' && always()
    runs-on: ubuntu-latest
    needs: [security-and-tests, validate-charts]
    steps:
      - name: PR Check Summary
        uses: actions/github-script@v7
        with:
          script: |
            const securityResult = '${{ needs.security-and-tests.result }}';
            const chartsResult = '${{ needs.validate-charts.result }}';
            
            // Jobs that ran need to succeed, skipped jobs are OK
            const securityOk = securityResult === 'skipped' || securityResult === 'success';
            const chartsOk = chartsResult === 'skipped' || chartsResult === 'success';
            
            const status = securityOk && chartsOk 
              ? '‚úÖ All checks passed! Ready to merge.'
              : '‚ùå Some checks failed. Please review.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Pull Request Validation Results\n\n${status}`
            });

  # Completion notification
  notify-success:
    runs-on: ubuntu-latest
    needs: [update-manifest]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Success notification
        run: |
          echo "‚úÖ CI/CD pipeline completed successfully!"
          echo "üîÑ ArgoCD will sync the latest changes automatically"